[
    {
        "description": "A test set of commands for the community",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {
            "!community_join": {
              "action": "http://127.0.0.1:8000/WaddleDBM/community_members/create_member.json",
              "description": "Creates a new member for a given community. Example: !community join [my_community]",
              "method": "POST",
              "parameters": [],
              "payload_keys": [
                "community_name",
                "identity_name"
              ],
              "req_priv_list": []
            },
            "!community_leave": {
              "action": "http://127.0.0.1:8000/WaddleDBM/community_members/remove_member.json",
              "description": "Leaves the given community. Example: !community leave [my_community]",
              "method": "DELETE",
              "parameters": [],
              "payload_keys": [
                "community_name",
                "identity_name"
              ],
              "req_priv_list": []
            },
            "!community_manage_add": {
              "action": "http://127.0.0.1:8000/WaddleDBM/communities/create_by_name.json",
              "description": "Add a new community. Example: !community manage add [my_community]",
              "method": "POST",
              "parameters": [],
              "payload_keys": [
                "identity_name",
                "community_name"
              ],
              "req_priv_list": []
            },
            "!community_manage_desc": {
              "action": "http://127.0.0.1:8000/WaddleDBM/communities/update_desc_by_name.json",
              "description": "Add a description to a community. Example: !community manage desc [My community description] <my_community>",
              "method": "PUT",
              "parameters": [
                {
                  "description": "The name of the community",
                  "name": "community_name",
                  "required": true
                }
              ],
              "payload_keys": [
                "identity_name",
                "community_description"
              ],
              "req_priv_list": [
                "write",
                "admin"
              ]
            },
            "!community_manage_ls": {
              "action": "http://127.0.0.1:8000/WaddleDBM/communities/get_all.json",
              "description": "List all the communities. Example: !community manage ls",
              "method": "GET",
              "parameters": [],
              "payload_keys": [],
              "req_priv_list": []
            },
            "!community_manage_rem": {
              "action": "http://127.0.0.1:8000/WaddleDBM/communities/delete_by_name.json",
              "description": "Remove a community. Example: !community manage rem <my_community>",
              "method": "DELETE",
              "parameters": [],
              "payload_keys": [
                "identity_name",
                "community_name"
              ],
              "req_priv_list": [
                "admin",
                "delete"
              ]
            },
            "!community_members_ls": {
              "action": "http://127.0.0.1:8000/WaddleDBM/community_members/get_names_by_community_name.json",
              "description": "Returns a list of all the members of the current community. Example: !community members ls",
              "method": "GET",
              "parameters": [
                "community_name"
              ],
              "payload_keys": [],
              "req_priv_list": [
                "read"
              ]
            },
            "!community_set_role": {
              "action": "http://127.0.0.1:8000/WaddleDBM/community_members/set_role.json",
              "description": "Updates the roll of a given member in a community. The member updating the roll, must be the owner of the community, or have admin privilages. Example: !community update role [member_name_to_update_role] [name_of_the_role]",
              "method": "PUT",
              "parameters": [
                "community_name"
              ],
              "payload_keys": [
                "identity_name",
                "role_receiver",
                "role_name"
              ],
              "req_priv_list": [
                "admin"
              ]
            }
          },
        "module_type_id": 1,
        "name": "Community"
    },
    {
        "description": "A test set of commands for the marketplace",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"!marketplace_install": {"action": "http://127.0.0.1:8000/WaddleDBM/community_modules/install_by_community_name.json", "description": "This command installs a marketplace module into the given community. Example: !marketplace install <my_community> [module_id]", "method": "GET", "parameters": ["community_name"], "payload_keys": ["module_name", "identity_name"], "req_priv_list": ["admin"]}, "!marketplace_ls": {"action": "http://127.0.0.1:8000/WaddleDBM/modules/get_all_community_modules.json", "description": "List all the items in the marketplace", "method": "GET", "parameters": [], "payload_keys": [], "req_priv_list": ["read"]}, "!marketplace_uninstall": {"action": "http://127.0.0.1:8000/WaddleDBM/community_modules/uninstall_by_community_name.json", "description": "This command uninstalls a module from a community. Example: !marketplace uninstall <my_community> [module_id]", "method": "GET", "parameters": ["community_name"], "payload_keys": ["module_name", "identity_name"], "req_priv_list": ["admin"]}},
        "module_type_id": 1,
        "name": "Marketplace"
    },
    {
        "description": "A test script module of one that must be added to a community.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"#test_script": {"action": "http://127.0.0.1:8000/WaddleDBM/test_script/test.json", "description": "This is a test script!!!", "method": "GET", "parameters": ["community_name"], "payload_keys": [], "req_priv_list": ["admin"]}},
        "module_type_id": 2,
        "name": "Test Module"
    },
    {
        "description": "A list of commands that handle the installation of marketplace modules into communities.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/community_modules/",
        "metadata": {"!marketplace_install": {"action": "http://127.0.0.1:8000/WaddleDBM/community_members/install_by_community_name.json", "description": "This command installs a marketplace module into the given community. Example: !marketplace install <my_community> [module_id]", "method": "GET", "parameters": ["community_name"], "payload_keys": ["module_id"], "req_priv_list": ["admin"]}, "!marketplace_uninstall": {"action": "http://127.0.0.1:8000/WaddleDBM/community_members/uninstall_by_community_name.json", "description": "This command uninstalls a module from a community. Example: !marketplace install <my_community> [module_id]", "method": "GET", "parameters": ["community_name"], "payload_keys": ["module_id"], "req_priv_list": ["admin"]}},
        "module_type_id": 1,
        "name": "Marketplace Community"
    },
    {
        "description": "A test set of commands for community context.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"!namespace_switch": {"action": "http://127.0.0.1:8000/WaddleDBM/context/set_context.json", "description": "Changes the namespace of the given user to the given community namespace. Example: !namespace switch [my_community]", "method": "PUT", "parameters": ["channel_id", "account"], "payload_keys": ["community_name", "identity_name"], "req_priv_list": []}},
        "module_type_id": 1,
        "name": "Context"
    },
    {
        "description": "A list of commands to handle the creation and deletion of gateway routes",
        "gateway_url": "http://127.0.0.1:5000/gateway-creator/",
        "metadata": {"!gateway_add": {"action": "http://127.0.0.1:5000/gateway-creator/", "description": "This command creates a new route for a given platform and channel. Example: !route add [platform] [channel]", "method": "POST", "parameters": [], "payload_keys": ["gateway_type_name", "channel_id"], "req_priv_list": ["admin"]}, "!gateway_rem": {"action": "http://127.0.0.1:5000/gateway-creator/", "description": "This command removes a route for a given platform and channel. Example: !route rem [platform] [channel]", "method": "DELETE", "parameters": [], "payload_keys": ["gateway_type_name", "channel_id"], "req_priv_list": ["admin"]}},
        "module_type_id": 1,
        "name": "Gateway Manager"
    },
    {
        "description": "A list of commands to handle the creation and deletion of routes between communities",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"!route_add": {"action": "http://127.0.0.1:8000/WaddleDBM/routing/add_route_to_community.json", "description": "This command adds a channel to a community. Example: !route add [community name]", "method": "PUT", "parameters": ["channel_id", "account"], "payload_keys": ["community_name"], "req_priv_list": ["admin"]}, "!route_rem": {"action": "http://127.0.0.1:8000/WaddleDBM/routing/remove_route_from_community.json", "description": "This command removes a channel from a community. Example: !route rem [community name]", "method": "DELETE", "parameters": ["channel_id", "account"], "payload_keys": ["community_name"], "req_priv_list": ["admin"]}},
        "module_type_id": 1,
        "name": "Routing Manager"
    },
    {
        "description": "A list of commands to manage currencies for users within communities.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"!currency_add": {"action": "http://127.0.0.1:8000/WaddleDBM/currency/add_currency.json", "description": "This command adds a given amount of currency to the current user. Example: !currency add [amount]", "method": "POST", "parameters": ["community_name"], "payload_keys": ["identity_name", "amount"], "req_priv_list": ["read", "write", "admin"]}, "!currency_get": {"action": "http://127.0.0.1:8000/WaddleDBM/currency/get_currency.json", "description": "This command gets the currency of the current user. Example: !currency get", "method": "GET", "parameters": ["community_name"], "payload_keys": ["identity_name"], "req_priv_list": ["read"]}, "!currency_give": {"action": "http://127.0.0.1:8000/WaddleDBM/currency/transfer_currency.json", "description": "This command gives currency from one user to another. Example: !currency give [user] [amount]", "method": "POST", "parameters": ["community_name"], "payload_keys": ["identity_name", "receiver_name", "amount"], "req_priv_list": ["read", "write"]}, "!currency_rem": {"action": "http://127.0.0.1:8000/WaddleDBM/currency/subtract_currency.json", "description": "This command removes a given amount of currency to the current user. Example: !currency rem [amount]", "method": "POST", "parameters": ["community_name"], "payload_keys": ["identity_name", "amount"], "req_priv_list": ["read", "write"]}},
        "module_type_id": 1,
        "name": "Currency"
    },
    {
        "description": "A list of commands to manage admin contexts.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"!admin_login": {"description": "This command logs an admin into an admin context to run admin commands. User must be an admin of the community.", "method": "POST", "action": "http://127.0.0.1:8000/WaddleDBM/admin_context/create_session.json", "parameters": ["community_name"], "payload_keys": ["identity_name"], "req_priv_list": []}, "!admin_logout": {"description": "This command logs an admin out of an admin context. User must be an admin of the community.", "method": "POST", "action": "http://127.0.0.1:8000/WaddleDBM/admin_context/delete_by_community_and_identity.json", "parameters": ["community_name"], "payload_keys": ["identity_name"], "req_priv_list": []}},
        "module_type_id": 1,
        "name": "Admin Context"
    },
    {
        "description": "A list of commands to manage text responses.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {"!text":{"action":"http://127.0.0.1:8000/WaddleDBM/text_responses/get_by_text.json","description":"This command gets a text response from a given value. Example: !text [text]","method":"GET","parameters":["community_name"],"payload_keys":["text"],"req_priv_list":[]},"!text_delete":{"action":"http://127.0.0.1:8000/WaddleDBM/text_responses/delete_by_text.json","description":"This command delete a text response from a given value. Example: !text delete [text]","method":"DELETE","parameters":["community_name"],"payload_keys":["text"],"req_priv_list":[]},"!text_get_all":{"action":"http://127.0.0.1:8000/WaddleDBM/text_responses/get_all.json","description":"This command gets all the text responses for the current community.","method":"GET","parameters":["community_name"],"payload_keys":[],"req_priv_list":[]},"!text_set":{"action":"http://127.0.0.1:8000/WaddleDBM/text_responses/set_text_response.json","description":"This command maps a text response to a text value. Example: !text set [text_to_bind_response_to] [response]","method":"POST","parameters":["community_name"],"payload_keys":["text","response"],"req_priv_list":[]}},
        "module_type_id": 1,
        "name": "Text Response"
    },
    {
        "description": "A list of commands to manage Command Aliases.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {
            "!alias": {
                "action":"http://127.0.0.1:8000/WaddleDBM/alias_commands/get_by_alias.json",
                "description":"This command gets a alias commands from a given value. Example: !alias [!alias]",
                "method":"GET",
                "parameters":[
                    "community_name"
                ],
                "payload_keys": [
                    "alias"
                ],
                "req_priv_list":[]
            },
            "!alias_delete":{
                "action":"http://127.0.0.1:8000/WaddleDBM/alias_commands/delete_by_alias.json",
                "description":"This command delete a alias commands from a given value. Example: !alias delete [!alias]",
                "method":"DELETE",
                "parameters":[
                    "community_name"
                ],
                "payload_keys":[
                    "alias"
                ],
                "req_priv_list":[]
            },
            "!alias_get_all":{
                "action":"http://127.0.0.1:8000/WaddleDBM/alias_commands/get_all.json",
                "description":"This command gets all the alias commandss for the current community.",
                "method":"GET",
                "parameters":[
                    "community_name"
                ],
                "payload_keys":[],
                "req_priv_list":[]
            },
            "!alias_set":{
                "action":"http://127.0.0.1:8000/WaddleDBM/alias_commands/set_alias_command.json",
                "description":"This command maps an existing waddlebot command to an alias. Example: !alias set [!alias] [!command]",
                "method":"POST",
                "parameters":["community_name"],
                "payload_keys":["alias","command"],
                "req_priv_list":[]
                }
            },
        "module_type_id": 1,
        "name": "Alias Commands"
    },
    {
        "description": "A list of commands to manage community Calenders.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {
            "!calender_add": {
                "action": "http://127.0.0.1:8000/WaddleDBM/calender/create.json",
                "description": "This command adds a new event to the calender. Example: !calender add [event_name] [event_description] [event_start] [event_end]",
                "method": "POST",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "identity_name",
                    "event_name",
                    "event_description",
                    "event_start",
                    "event_end"
                ],
                "req_priv_list": [
                    "read",
                    "write",
                    "admin"
                ]
            },
            "!calender_get_all": {
                "action": "http://127.0.0.1:8000/WaddleDBM/calender/get_by_community.json",
                "description": "This command gets all the events in the calender for the current community. Example: !calender get all. Optionally, you can pass a start and end date to get all events on that time frame. Example: !calender get all [start_date] [end_date]",
                "method": "GET",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [

                ],
                "req_priv_list": [
                    "read"
                ]
            },
            "!calender_update": {
                "action": "http://127.0.0.1:8000/WaddleDBM/calender/update_by_name.json",
                "description": "This command updates an event in the calender. Example: !calender update [event_name] [event_description] [event_start] [event_end]",
                "method": "PUT",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "event_name",
                    "event_description",
                    "event_start",
                    "event_end"
                ],
                "req_priv_list": [
                    "read",
                    "write",
                    "admin"
                ]
            },
            "!calender_delete": {
                "action": "http://127.0.0.1:8000/WaddleDBM/calender/delete_by_name.json",
                "description": "This command deletes an event from the calender. Example: !calender delete [event_name]",
                "method": "DELETE",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "event_name"
                ],
                "req_priv_list": [
                    "read",
                    "write",
                    "admin"
                ]
            }
        },
        "module_type_id": 1,
        "name": "Calender"
    },
    {
        "description": "A list of commands to manage identity labels.",
        "gateway_url": "http://127.0.0.1:8000/WaddleDBM/",
        "metadata": {
            "!identity_label_get": {
                "action": "http://127.0.0.1:8000/WaddleDBM/identity_label/get_by_identity_and_community.json",
                "description": "This command gets the identity label for the current user. Example: !identity label get",
                "method": "GET",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "identity_name"
                ],
                "req_priv_list": [
                    "read"
                ]
            },
            "!identity_label_add": {
                "action": "http://127.0.0.1:8000/WaddleDBM/identity_label/create.json",
                "description": "This command adds a new identity label to the current user. Example: !identity label add [label]",
                "method": "POST",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "identity_name",
                    "label"
                ],
                "req_priv_list": [
                    "read",
                    "write",
                    "admin"
                ]
            },
            "!identity_label_update": {
                "action": "http://127.0.0.1:8000/WaddleDBM/identity_label/update_by_identity_and_community.json",
                "description": "This command updates an identity label for the current user. Example: !identity label update [label]",
                "method": "PUT",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "identity_name",
                    "label"
                ],
                "req_priv_list": [
                    "read",
                    "write",
                    "admin"
                ]
            },
            "!idenity_label_delete": {
                "action": "http://127.0.0.1:8000/WaddleDBM/identity_label/delete_by_identity_and_community.json",
                "description": "This command deletes an identity label for the current user. Example: !identity label delete",
                "method": "DELETE",
                "parameters": [
                    "community_name"
                ],
                "payload_keys": [
                    "identity_name"
                ],
                "req_priv_list": [
                    "read",
                    "write",
                    "admin"
                ]
            }
        },
        "module_type_id": 1,
        "name": "Identity Label"
    }
]